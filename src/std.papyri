@export @fn page(
    $title: str,
    $web_root: str = `https://kaya3.github.io/papyri`,
    $head?: html,
    $header?: html,
    $footer?: html,
) $content: block -> {
    @let(w=@match $web_root {"$w/" -> $w, _ -> $web_root})...
    <!DOCTYPE html>
    <html>
    <head>
        <title>$title</>#
        <meta charset=`utf-8`>#
        <link rel=`stylesheet` type=`text/css` href="$w/papyri.css">#
        $head
    </>#
    <body>
        @match $header {. -> ., _ -> <header>$header</>}#
        <article>$content</>#
        @match $footer {. -> ., _ -> <footer>$footer</>}#
        <script type=`text/javascript` src="$w/papyri.js"/>
    </>
    </>
}

@export @fn typeof $v -> @match $v {_: $t -> $t}

@export @fn attributes(**$d: str? dict) $v: html -> @match $v {
    <$t **$a>$v</> -> <$t **$a **$d>$v</>,
    _: $t -> @raise "expected tag, was $t",
}
@export @fn class($_c: str) $v: html -> @match $v {
    <$t class=$o **$a>$v</> -> <$t class="$o $_c" **$a>$v</>,
    <$t **$a>$v</> -> <$t class=$_c **$a>$v</>,
    _: $t -> @raise "expected tag, was $t",
}
@export @fn style($_s: str) $v: html -> @match $v {
    <$t style=$o **$a>$v</> -> <$t style="$o$_s" **$a>$v</>,
    <$t **$a>$v</> -> <$t style=$_s **$a>$v</>,
    _: $t -> @raise "expected tag, was $t",
}

@export @fn b $v: inline -> <b>$v</>
@export @fn blockquote($cite?: str) $v: block -> <blockquote cite?=$cite>$v</>
@export @fn bold $v: inline -> <strong>$v</>
@export @fn cite $v: inline -> <cite>$v</>
@export @fn dfn $v: inline -> <dfn>$v</>
@export @fn emph $v: inline -> <em>$v</>
@export @fn href($_url: str) $v: inline -> <a href=$_url>$v</>
@export @fn i $v: inline -> <i>$v</>
@export @fn image($alt?: str) $url: str -> <img src=$url alt?=$alt>
@export @fn kbd $v: str -> <kbd>$v</>
@export @fn quote $v: inline -> <q>$v</>
@export @fn samp $v: str -> <samp>$v</>
@export @fn span $v: inline -> <span>$v</>
@export @fn sub $v: inline -> <sub>$v</>
@export @fn sup $v: inline -> <sup>$v</>
@export @fn strikethrough $v: inline -> <s>$v</>
@export @fn underline $v: inline -> <u>$v</>

@export @fn h1 $v: inline -> <h1>$v</>
@export @fn h2 $v: inline -> <h2>$v</>
@export @fn h3 $v: inline -> <h3>$v</>
@export @fn h4 $v: inline -> <h4>$v</>
@export @fn h5 $v: inline -> <h5>$v</>
@export @fn h6 $v: inline -> <h6>$v</>

@export @fn code_block($language?: implicit str, $first_line_no: int = 1) $v: str -> {
    <pre class="panel listing">
        @code(language=$language, code_block=True, first_line_no=$first_line_no) $v
    </>
}

@export @fn numbered $v: html -> @match $v {
    <ul **$d>$v</> -> <ol **$d>$v</>,
    <$t **_>_</> -> @raise "expected <ul> tag, was <$t> tag",
    _: $t -> @raise "expected <ul> tag, was $t",
}

@export @fn footnote $v: inline -> {
    |<a class="footnote-ref"/><span class="footnote panel">$v</>
}

@fn dict_new(**$kwargs: any dict). -> $kwargs

@export(
    bool=@dict_new(
        negate=@fn bool_negate $b: bool -> $b::negate,
        and=@fn bool_and($_0: bool, $_1: bool). -> @match $_0 {True -> $_1, False -> False},
        or=@fn bool_or($_0: bool, $_1: bool). -> @match $_0 {True -> True, False -> $_1},
    ).,
    int=@dict_new(
        **$int,
        negate=@fn int_negate $i: int -> $i::negate,
    ).,
    str=@dict_new(
        **$str,
        from=@fn str_from $s: str -> $s,
        is_empty=@fn str_is_empty $s: str -> $s::is_empty,
        is_whitespace=@fn str_is_whitespace $s: str -> $s::is_whitespace,
        len=@fn str_len $s: str -> $s::len,
        trim=@let(_trim_regex=@regex::compile `^\s*(.*?)\s*$`) @fn str_trim $s: str -> @match @_trim_regex::find $s {[_, $r] -> $r, _ -> .},
    ).,
    function=@dict_new(
        **$function,
        call=@fn function_call($_f: function, *$_args, **$kwargs) $content -> @_f(*$_args, **$kwargs) $content,
    ).,
    regex=@dict_new(
        **$regex,
        test=@fn regex_test($_r: regex) $s: str -> @match @_r::find $s {. -> False, _ -> True},
        count=@fn regex_count($_r: regex) $s: str -> @let(v=@_r::find_all $s) $v::len,
    ).,
    list=@dict_new(
        **$list,
        all=@fn list_all($_f: function) $v: any list -> @match $v {[] -> True, [$a, *$b] -> @match @_f $a {True -> @list::all($_f) $b, False -> False}},
        any=@fn list_any($_f: function) $v: any list -> @match $v {[] -> False, [$a, *$b] -> @match @_f $a {True -> True, False -> @list::any($_f) $b}},
        contains=@fn list_contains($_v) $v: any list -> @match $v {[] -> False, [=$_v, *_] -> True, [_, *$r] -> @list::contains($_v) $r},
        find=@fn list_find($_f: function) $v: any list -> @match $v {[] -> ., [$a, *$b] -> @match @_f $a {True -> $a, False -> @list::find($_f) $b}},
        flat=@fn list_flat $v: any list -> $v::flat,
        is_empty=@fn list_is_empty $v: any list -> $v::is_empty,
        len=@fn list_len $v: any list -> $v::len,
        reversed=@fn list_reversed $v: any list -> $v::reversed,
    ).,
    dict=@dict_new(
        new=$dict_new,
    ).,
    html=@dict_new(
        **$html,
        is_empty=@fn html_is_empty $h: html -> $h::is_empty,
        is_whitespace=@fn html_is_whitespace $h: html -> $h::is_whitespace,
        nodes=@fn html_nodes $h: html -> $h::nodes,
        tag_name=@fn html_tag_name $h: html -> $h::tag_name,
    ).,
    inline=@dict_new(
        from=@fn inline_from $v: inline -> $v,
    ).,
    block=@dict_new(
        from=@fn block_from $v: block -> $v,
    ).,
).
